{
  "type": "PostgreSQL",
  "managed": true,
  "formatType": "csv",
  "checklists": {
    "checklists": []
  },
  "checks": [],
  "customMeta": {
    "kv": {}
  },
  "flowOptions": {
    "virtualizable": false,
    "rebuildBehavior": "NORMAL",
    "crossProjectBuildBehavior": "DEFAULT"
  },
  "readWriteOptions": {
    "preserveOrder": false,
    "writeBuckets": 1,
    "forceSingleOutputFile": false,
    "defaultReadOrdering": {
      "enabled": false,
      "rules": []
    }
  },
  "formatParams": {
    "style": "unix",
    "charset": "utf8",
    "separator": "\t",
    "quoteChar": "\"",
    "escapeChar": "\\",
    "dateSerializationFormat": "ISO",
    "arrayMapFormat": "json",
    "hiveSeparators": [
      "\u0002",
      "\u0003",
      "\u0004",
      "\u0005",
      "\u0006",
      "\u0007",
      "\b"
    ],
    "skipRowsBeforeHeader": 0,
    "parseHeaderRow": false,
    "skipRowsAfterHeader": 0,
    "probableNumberOfRecords": 0,
    "normalizeBooleans": false,
    "normalizeDoubles": true,
    "readAdditionalColumnsBehavior": "INSERT_IN_DATA_WARNING",
    "readMissingColumnsBehavior": "DISCARD_SILENT",
    "readDataTypeMismatchBehavior": "DISCARD_WARNING",
    "writeDataTypeMismatchBehavior": "DISCARD_WARNING",
    "fileReadFailureBehavior": "FAIL",
    "compress": "gz"
  },
  "partitioning": {
    "ignoreNonMatchingFile": false,
    "considerMissingRequestedPartitionsAsEmpty": false,
    "dimensions": []
  },
  "versionTag": {
    "versionNumber": 6,
    "lastModifiedBy": {
      "login": "ajelley"
    },
    "lastModifiedOn": 1611566590794
  },
  "creationTag": {
    "versionNumber": 0,
    "lastModifiedBy": {
      "login": "dataiku"
    },
    "lastModifiedOn": 1551103291953
  },
  "tags": [
    "Training model on historical data",
    "To partition"
  ],
  "params": {
    "writeWithCopyBadDataBehavior": "NOVERIFY_ERROR",
    "connection": "PostgreSQL",
    "notReadyIfEmpty": false,
    "mode": "table",
    "partitioningType": "custom",
    "normalizeDoubles": true,
    "table": "${projectKey}_westnile_data_joined",
    "tableCreationMode": "auto",
    "writeInsertBatchSize": 10000,
    "writeJDBCBadDataBehavior": "DISCARD_ROW",
    "readColsWithUnknownTzAsDates": false,
    "readSQLDateColsAsDSSDates": true
  },
  "schema": {
    "columns": [
      {
        "name": "Address",
        "type": "string"
      },
      {
        "name": "Species",
        "type": "string"
      },
      {
        "name": "Block",
        "type": "bigint"
      },
      {
        "name": "Street",
        "type": "string"
      },
      {
        "name": "Trap",
        "type": "string"
      },
      {
        "name": "AddressNumberAndStreet",
        "type": "string"
      },
      {
        "name": "Latitude",
        "type": "double"
      },
      {
        "name": "Longitude",
        "type": "double"
      },
      {
        "name": "AddressAccuracy",
        "type": "bigint"
      },
      {
        "name": "NumMosquitos",
        "type": "float"
      },
      {
        "name": "WnvPresent",
        "type": "float"
      },
      {
        "name": "Date",
        "type": "string"
      },
      {
        "name": "Date_parsed",
        "type": "date"
      },
      {
        "name": "year",
        "type": "bigint"
      },
      {
        "name": "Day_number",
        "type": "bigint"
      },
      {
        "name": "position",
        "type": "string"
      },
      {
        "name": "weather_Tmax",
        "type": "string"
      },
      {
        "name": "weather_Tmin",
        "type": "string"
      },
      {
        "name": "weather_Tavg",
        "type": "string"
      },
      {
        "name": "weather_Depart",
        "type": "string"
      },
      {
        "name": "weather_DewPoint",
        "type": "string"
      },
      {
        "name": "weather_WetBulb",
        "type": "string"
      },
      {
        "name": "weather_Heat",
        "type": "string"
      },
      {
        "name": "weather_Cool",
        "type": "string"
      },
      {
        "name": "weather_Sunrise",
        "type": "string"
      },
      {
        "name": "weather_Sunset",
        "type": "string"
      },
      {
        "name": "weather_CodeSum",
        "type": "string"
      },
      {
        "name": "weather_Depth",
        "type": "string"
      },
      {
        "name": "weather_Water1",
        "type": "string"
      },
      {
        "name": "weather_SnowFall",
        "type": "string"
      },
      {
        "name": "weather_PrecipTotal",
        "type": "string"
      },
      {
        "name": "weather_StnPressure",
        "type": "string"
      },
      {
        "name": "weather_SeaLevel",
        "type": "string"
      },
      {
        "name": "weather_ResultSpeed",
        "type": "string"
      },
      {
        "name": "weather_ResultDir",
        "type": "string"
      },
      {
        "name": "weather_AvgSpeed",
        "type": "string"
      }
    ],
    "userModified": true
  },
  "dkuProperties": [],
  "metrics": {
    "probes": [
      {
        "type": "basic",
        "enabled": true,
        "computeOnBuildMode": "PARTITION",
        "meta": {
          "name": "Basic data",
          "level": 0
        },
        "configuration": {}
      },
      {
        "type": "records",
        "enabled": true,
        "computeOnBuildMode": "NO",
        "meta": {
          "name": "Record count",
          "level": 0
        },
        "configuration": {}
      },
      {
        "type": "partitioning",
        "enabled": true,
        "computeOnBuildMode": "WHOLE_DATASET",
        "meta": {
          "name": "Partitioning statistics",
          "level": 1
        },
        "configuration": {}
      },
      {
        "type": "col_stats",
        "enabled": true,
        "computeOnBuildMode": "WHOLE_DATASET",
        "meta": {
          "name": "Columns statistics",
          "level": 2
        },
        "configuration": {
          "aggregates": [
            {
              "column": "Trap",
              "aggregated": "COUNT_DISTINCT"
            }
          ]
        }
      },
      {
        "type": "adv_col_stats",
        "enabled": false,
        "computeOnBuildMode": "NO",
        "meta": {
          "name": "Most frequent values",
          "level": 3
        },
        "configuration": {
          "aggregates": [],
          "numberTopValues": 10
        }
      },
      {
        "type": "percentile_stats",
        "enabled": false,
        "computeOnBuildMode": "NO",
        "meta": {
          "name": "Columns percentiles",
          "level": 4
        },
        "configuration": {
          "aggregates": []
        }
      },
      {
        "type": "verify_col",
        "enabled": false,
        "computeOnBuildMode": "NO",
        "meta": {
          "name": "Data validity",
          "level": 4
        },
        "configuration": {
          "aggregates": []
        }
      },
      {
        "type": "python",
        "enabled": true,
        "computeOnBuildMode": "NO",
        "meta": {
          "name": "Python probe",
          "level": 8
        },
        "configuration": {
          "code": "def process(dataset, partition_id):\n    df \u003d dataset.get_dataframe()\n    df[\u0027weather_Tavg\u0027] \u003d df[\u0027weather_Tavg\u0027].astype(\u0027float\u0027)\n    max_temp_celsius \u003d df[\u0027weather_Tavg\u0027].apply(lambda x: (x-32)*5/9).max()\n    return {\u0027max_temp_celsius\u0027 : max_temp_celsius }\n\n\n\n\n\n\n",
          "envSelection": {
            "envMode": "INHERIT"
          }
        }
      },
      {
        "type": "sql_query",
        "enabled": true,
        "computeOnBuildMode": "NO",
        "meta": {
          "name": "SQL probe",
          "level": 9
        },
        "configuration": {
          "code": "select max((\"weather_Tavg\"::integer-32)*5/9) as \"max_temp_celsius\"\nfrom ${DKU_DATASET_TABLE_NAME}\n",
          "canRunOnImpala": true,
          "singleAggregate": false,
          "perColumn": false,
          "columns": []
        }
      }
    ],
    "engineConfig": {
      "padRunsWithMetrics": false,
      "hive": {
        "active": true,
        "extraConf": []
      },
      "basic": {},
      "dss": {
        "active": true,
        "selection": {
          "useMemTable": false,
          "filter": {
            "distinct": false,
            "enabled": false
          },
          "partitionSelectionMethod": "ALL",
          "latestPartitionsN": 1,
          "ordering": {
            "enabled": false,
            "rules": []
          },
          "samplingMethod": "FULL",
          "maxRecords": -1,
          "targetRatio": 0.02,
          "withinFirstN": -1,
          "maxReadUncompressedBytes": -1
        }
      },
      "sql": {
        "active": true
      },
      "impala": {
        "active": true
      },
      "spark": {
        "active": true,
        "extraConf": []
      },
      "python": {}
    },
    "displayedState": {
      "partition": "NP",
      "columns": [],
      "metrics": [
        "basic:COUNT_COLUMNS",
        "basic:COUNT_FILES",
        "basic:SIZE",
        "records:COUNT_RECORDS",
        "col_stats:COUNT_DISTINCT:Trap",
        "python:max_temp_celsius:Python probe",
        "sql_query:max_temp_celsius:SQL probe"
      ]
    }
  },
  "metricsChecks": {
    "runOnBuild": false,
    "checks": [
      {
        "code": "def process(last_values, dataset, partition_id):\n    print last_values\n    nbr_unique_traps \u003d last_values[\u0027col_stats:COUNT_DISTINCT:Trap\u0027].get_value()\n    \n    if nbr_unique_traps \u003e 100:\n        return \u0027OK\u0027, \u0027Number of unique traps: {}\u0027.format(nbr_unique_traps)\n    elif nbr_unique_traps \u003e 80 and nbr_unique_traps \u003c\u003d100:\n        return \u0027WARNING\u0027, \u0027Number of unique traps: {}\u0027.format(nbr_unique_traps)\n    else:\n        return \u0027ERROR\u0027, \u0027Number of unique traps: {}\u0027.format(nbr_unique_traps)\n",
        "envSelection": {
          "envMode": "INHERIT"
        },
        "type": "python",
        "meta": {
          "name": "Custom check",
          "label": "unique traps"
        },
        "computeOnBuildMode": "PARTITION"
      }
    ],
    "displayedState": {
      "partition": "NP",
      "checks": []
    }
  },
  "customFields": {}
}